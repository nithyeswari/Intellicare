{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3c39d7ca-a33a-41ca-adb9-ef8549b5edbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import joblib\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import logging\n",
    "\n",
    "# Initialize logging\n",
    "logger = logging.getLogger()\n",
    "logger.setLevel(logging.INFO)\n",
    "\n",
    "# Load model and encoders only once\n",
    "try:\n",
    "    model = joblib.load('model/stroke-model.joblib')\n",
    "    encoders = joblib.load('model/label_encoders.joblib')\n",
    "except Exception as e:\n",
    "    logger.error(\"Error loading model or encoders: %s\", str(e))\n",
    "    raise e\n",
    "\n",
    "# Define expected features\n",
    "REQUIRED_FIELDS = list(encoders.keys()) + ['Hypertension', 'Diabetes']\n",
    "\n",
    "def validate_input(input_data):\n",
    "    missing = [field for field in REQUIRED_FIELDS if field not in input_data]\n",
    "    if missing:\n",
    "        return False, f\"Missing required fields: {', '.join(missing)}\"\n",
    "    return True, \"\"\n",
    "\n",
    "def preprocess_input(input_data):\n",
    "    df = pd.DataFrame([input_data])\n",
    "\n",
    "    # Encode categorical features\n",
    "    for col, encoder in encoders.items():\n",
    "        try:\n",
    "            df[col] = encoder.transform(df[col].astype(str))\n",
    "        except Exception as e:\n",
    "            raise ValueError(f\"Encoding failed for column '{col}': {str(e)}\")\n",
    "\n",
    "    # Convert binary columns\n",
    "    for col in ['Hypertension', 'Diabetes']:\n",
    "        df[col] = str(df[col]).strip().lower()\n",
    "        df[col] = 1 if df[col] in ['yes', '1'] else 0\n",
    "\n",
    "    return df\n",
    "\n",
    "def lambda_handler(event, context):\n",
    "    try:\n",
    "        input_data = json.loads(event['body'])\n",
    "        logger.info(\"Input received: %s\", input_data)\n",
    "\n",
    "        # Validate input\n",
    "        valid, msg = validate_input(input_data)\n",
    "        if not valid:\n",
    "            return {\"statusCode\": 400, \"body\": json.dumps({\"error\": msg})}\n",
    "\n",
    "        # Preprocess input\n",
    "        df = preprocess_input(input_data)\n",
    "\n",
    "        # Predict\n",
    "        prediction = int(model.predict(df)[0])\n",
    "        confidence = float(np.max(model.predict_proba(df)))\n",
    "\n",
    "        return {\n",
    "            \"statusCode\": 200,\n",
    "            \"body\": json.dumps({\n",
    "                \"prediction\": prediction,\n",
    "                \"confidence\": round(confidence, 3)\n",
    "            })\n",
    "        }\n",
    "\n",
    "    except Exception as e:\n",
    "        logger.error(\"Exception during prediction: %s\", str(e))\n",
    "        return {\n",
    "            \"statusCode\": 500,\n",
    "            \"body\": json.dumps({\"error\": str(e)})\n",
    "        }\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a1997c3-0ab8-47c1-93a7-29c5354d9c7e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
